<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>About on 流水沉微</title>
    <link>http://shuxiao.wang/</link>
    <description>Recent content in About on 流水沉微</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <lastBuildDate>Tue, 14 May 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://shuxiao.wang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sams Teach Yourself TCP/IP in 24 Hours</title>
      <link>http://shuxiao.wang/book/tcpip-in-24-hours/</link>
      <pubDate>Sat, 26 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>http://shuxiao.wang/book/tcpip-in-24-hours/</guid>
      <description>在我学习 TCP/IP 协议的道路上遇到过很多书，随便拎一本出来都是振聋发聩的作品： TCP/IP详解 卷1：协议 图解TCP/IP（第5版） TCP/IP详解 卷</description>
    </item>
    
    <item>
      <title>2. Add Two Numbers</title>
      <link>http://shuxiao.wang/leetcode/2.-add-two-numbers/</link>
      <pubDate>Thu, 03 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>http://shuxiao.wang/leetcode/2.-add-two-numbers/</guid>
      <description>Explain You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
 Example
Input: (2 -&amp;gt; 4 -&amp;gt; 3) + (5 -&amp;gt; 6 -&amp;gt; 4)</description>
    </item>
    
    <item>
      <title>Cloud</title>
      <link>http://shuxiao.wang/cloud/</link>
      <pubDate>Tue, 14 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://shuxiao.wang/cloud/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Eureka!</title>
      <link>http://shuxiao.wang/eureka/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shuxiao.wang/eureka/</guid>
      <description></description>
    </item>
    
    <item>
      <title>9. Palindrome Number</title>
      <link>http://shuxiao.wang/leetcode/9.-palindrome-number/</link>
      <pubDate>Sat, 19 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>http://shuxiao.wang/leetcode/9.-palindrome-number/</guid>
      <description>Explain Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.
 Example 1
Input: 121
Output: true
Example 2
Input: -121
Output: false
Explanation: From left to right, it reads -121. From right to left, it &amp;gt; becomes 121-.
Therefore it is not a palindrome.
Example 3
Input: 10
Output: false
Explanation: Reads 01 from right to left. Therefore it is not a palindrome.</description>
    </item>
    
    <item>
      <title>21. Merge Two Sorted Lists</title>
      <link>http://shuxiao.wang/leetcode/21.-merge-two-sorted-lists/</link>
      <pubDate>Wed, 02 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>http://shuxiao.wang/leetcode/21.-merge-two-sorted-lists/</guid>
      <description>Explain Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists. Example Input: 1-&amp;gt;2-&amp;gt;4, 1-&amp;gt;3-&amp;gt;4 Output: 1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;4 Solve # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution: def mergeTwoLists(self, l1: ListNode, l2: ListNode) -&amp;gt; ListNode: if not l1: return</description>
    </item>
    
    <item>
      <title>142. Linked List Cycle II</title>
      <link>http://shuxiao.wang/leetcode/142.-linked-list-cycle-ii/</link>
      <pubDate>Wed, 02 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>http://shuxiao.wang/leetcode/142.-linked-list-cycle-ii/</guid>
      <description>Explain Given a linked list, return the node where the cycle begins. If there is no cycle, return null.
To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.
 Note:
Do not modify the linked list.
 Solve # Definition for singly-linked list.</description>
    </item>
    
    <item>
      <title>146. LRU Cache</title>
      <link>http://shuxiao.wang/leetcode/146.-lru-cache/</link>
      <pubDate>Wed, 02 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>http://shuxiao.wang/leetcode/146.-lru-cache/</guid>
      <description>LRU 来自于 Cache replacement policies，是缓存淘汰策略的一种，很实用也有比较简洁的实现方法，用来面试正好，足够难、又足够简单 Explain Design and implement a data structure for Least Recently Used (LRU) cache.</description>
    </item>
    
    <item>
      <title>编程语言精要</title>
      <link>http://shuxiao.wang/book/eopl/</link>
      <pubDate>Sun, 27 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>http://shuxiao.wang/book/eopl/</guid>
      <description>基于种种原因，决定还是静下心来读一读以前想读但是一直没读的书，首先是这本Essentials of Programming Languages, 3rd Edition 从EOPL开始而不是SICP开始，是感</description>
    </item>
    
    <item>
      <title>208. Implement Trie (Prefix Tree)</title>
      <link>http://shuxiao.wang/leetcode/208.-implement-trie/</link>
      <pubDate>Wed, 02 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>http://shuxiao.wang/leetcode/208.-implement-trie/</guid>
      <description>Explain Implement a trie with insert, search, and startsWith methods. Example Trie trie = new Trie(); trie.insert(&amp;#34;apple&amp;#34;); trie.search(&amp;#34;apple&amp;#34;); // returns true trie.search(&amp;#34;app&amp;#34;); // returns false trie.startsWith(&amp;#34;app&amp;#34;); // returns true trie.insert(&amp;#34;app&amp;#34;); trie.search(&amp;#34;app&amp;#34;); // returns true Note You may assume that all inputs are consist of lowercase letters a-z. All inputs are guaranteed to be non-empty strings. Solve class Node: def __init__(self): self.children = {} self.is_word = False class Trie: def __init__(self):</description>
    </item>
    
    <item>
      <title>236. Lowest Common Ancestor of a Binary Tree</title>
      <link>http://shuxiao.wang/leetcode/236.-lowest-common-ancestor-of-a-binary-tree/</link>
      <pubDate>Wed, 02 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>http://shuxiao.wang/leetcode/236.-lowest-common-ancestor-of-a-binary-tree/</guid>
      <description>Explain Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree. According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itsel</description>
    </item>
    
    <item>
      <title>334. Increasing Triplet Subsequence</title>
      <link>http://shuxiao.wang/leetcode/334.-increasing-triplet-subsequence/</link>
      <pubDate>Wed, 02 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>http://shuxiao.wang/leetcode/334.-increasing-triplet-subsequence/</guid>
      <description>这是我在搜索 trie tree 的时候弹出来到一个题，乍一看觉得挺简单，但是对时间和空间都有要求，我能想到到办法就是以每个数为第一个数开始向后搜索，但是这样</description>
    </item>
    
    <item>
      <title>一年读书记录</title>
      <link>http://shuxiao.wang/posts/annual-2019/</link>
      <pubDate>Sat, 28 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://shuxiao.wang/posts/annual-2019/</guid>
      <description>一觉醒来发现这周末没什么事，但是仔细一想一年都已经过去了 今年翻过的书大概在200本左右，认真cover to cover读过的大概在30 - 50本，</description>
    </item>
    
    <item>
      <title>如何构建好软件</title>
      <link>http://shuxiao.wang/posts/how-to-build-good-software/</link>
      <pubDate>Sat, 21 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://shuxiao.wang/posts/how-to-build-good-software/</guid>
      <description>译者序 在读到此文时感觉非常不同于其他类似文章，本文的立意很高，从战略角度阐述了跟人月神话类似的观点：软件开发最重要的是保持专注和精简、控制复</description>
    </item>
    
    <item>
      <title>十号线的读书人</title>
      <link>http://shuxiao.wang/posts/reader-in-line-ten/</link>
      <pubDate>Sun, 24 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>http://shuxiao.wang/posts/reader-in-line-ten/</guid>
      <description>自2018年8月起，因为换工作和换住地，我就开始了环绕十号线半周的通勤生活，从进站闸机到出站闸机要50分钟，来往就是接近2个小时。无聊且网络</description>
    </item>
    
    <item>
      <title>第一章 归纳的数据集</title>
      <link>http://shuxiao.wang/book/eopl1/</link>
      <pubDate>Tue, 19 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>http://shuxiao.wang/book/eopl1/</guid>
      <description>本章介绍了一些基本的编程工具，这些工具在后续编写解释器(interpreters)、检查器(checkers)和类似组成编程语言核心处理器(</description>
    </item>
    
    <item>
      <title>自己的主题</title>
      <link>http://shuxiao.wang/posts/my-own-theme/</link>
      <pubDate>Thu, 07 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>http://shuxiao.wang/posts/my-own-theme/</guid>
      <description>终于自己做了主题 从2014年末开始，我就尝试写一点什么来记录自己，也就开始寻找做自己的博客的方法。最初使用的是jekyll，在知乎上看到有人</description>
    </item>
    
    <item>
      <title>楼梯有多少种走法</title>
      <link>http://shuxiao.wang/posts/ladder/</link>
      <pubDate>Mon, 21 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>http://shuxiao.wang/posts/ladder/</guid>
      <description>这是在 telegram 网鱼网咖群里聊天时，Haruhi贴的一个题，题目如下： 思路很简单 可以从14、13、12级跨到第15级 f(15)=f(14)+f(13)+f(12) 递推公式出来鸟~ 当然要得到一个</description>
    </item>
    
    <item>
      <title>Redis 复制时的 fork 的子进程</title>
      <link>http://shuxiao.wang/posts/redis-rdb-fork/</link>
      <pubDate>Fri, 13 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://shuxiao.wang/posts/redis-rdb-fork/</guid>
      <description>背景 问：Redis 主从节点同步知道吗？ 答：知道一点，不太熟 问：从节点申请同步的时候主节点做了什么？ 答：fork 一个子线程做同步 问：是子进程，</description>
    </item>
    
    <item>
      <title>A fatal communication error with WAS</title>
      <link>http://shuxiao.wang/posts/was-error/</link>
      <pubDate>Mon, 29 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>http://shuxiao.wang/posts/was-error/</guid>
      <description>背景情况 也是工作里遇到的一个问题，一个 host 在 IIS 上的古老项目（最早可以追溯到 16 年前），时不时会报下面这个错误： 应用程序池 “.NET” 提供服务的进</description>
    </item>
    
    <item>
      <title>P0: Golang Submission Error</title>
      <link>http://shuxiao.wang/posts/golang-submission-error/</link>
      <pubDate>Fri, 31 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://shuxiao.wang/posts/golang-submission-error/</guid>
      <description>Review 过了一段时间自己看都觉得这代码写得好蠢，于是改了一版，如下： package main import &amp;#34;fmt&amp;#34; func main() { fmt.Println(permute([]int{1,0,3})) } func permute(nums []int) [][]int { if len(nums) == 1 { return [][]int{ nums, } } array := nums var result [][]int generate(len(nums), &amp;amp;array, &amp;amp;result) return result } func generate(k int,</description>
    </item>
    
    <item>
      <title>CLI App in C# 其三</title>
      <link>http://shuxiao.wang/posts/cli-app-in-csharp3/</link>
      <pubDate>Tue, 14 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://shuxiao.wang/posts/cli-app-in-csharp3/</guid>
      <description>这是 CLI App in C# 系列的第三篇，本篇主要介绍gen的打包和发布。 .Net Core控制台应用的打包方法主要是两类： 可执行文件，对应直接运行，Windows</description>
    </item>
    
    <item>
      <title>CLI App in C# 其二</title>
      <link>http://shuxiao.wang/posts/cli-app-in-csharp2/</link>
      <pubDate>Sun, 12 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://shuxiao.wang/posts/cli-app-in-csharp2/</guid>
      <description>这是 CLI App in C# 系列的第二篇，本篇主要介绍gen的开发过程。教程里的所有代码参见keaising/gen 新建项目 在合适的地方使用dotnet new console</description>
    </item>
    
    <item>
      <title>CLI App in C# 其一</title>
      <link>http://shuxiao.wang/posts/cli-app-in-csharp1/</link>
      <pubDate>Sat, 11 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://shuxiao.wang/posts/cli-app-in-csharp1/</guid>
      <description>这是 CLI App in C# 系列的 第一篇 (Wa Da Keng) 写这个系列的目的是介绍用C#写一个命令行工具的所有内容，从规划、选型、编码、到打包和自动化编译的系列工作都会介</description>
    </item>
    
    <item>
      <title>处理dotnet core Redis超时异常</title>
      <link>http://shuxiao.wang/posts/stackexchange-redis-timeout/</link>
      <pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://shuxiao.wang/posts/stackexchange-redis-timeout/</guid>
      <description>压力测试过程中遇到的一个问题，框架是asp.net core 2.2，redis组件是StackExchange.Redis 2.0.601，在高并发场</description>
    </item>
    
    <item>
      <title>Hero</title>
      <link>http://shuxiao.wang/cs/hero/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://shuxiao.wang/cs/hero/</guid>
      <description>   Name Hardware OS     SNIPER iPhone SE iOS   TECHIES Kindle Paperwhite 2nd Android   SLADAR Kindle Oasis 2nd Android   MEEPO Nintendo Switch Unknown   TINKER iPad mini 5th iOS   SPECTRE ThinkPad X1 Tablet 3rd Kubuntu   VIPER Home PC Windows   MORPHLING Home PC Fedora    </description>
    </item>
    
    <item>
      <title>MySQL</title>
      <link>http://shuxiao.wang/cs/mysql/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://shuxiao.wang/cs/mysql/</guid>
      <description>事务 隔离级别[1] 隔离级别 脏读可能性 不可重复读可能性 幻读可能性 加锁读 读未提交 Read uncommitted ○ ○ ○ ○ 读已提交 Read committed × ○ ○ ○ 可重复读 Repeatable read × × ○ × 串行化 Serializable × ×</description>
    </item>
    
    <item>
      <title>在Eclipse中调用Algs4库</title>
      <link>http://shuxiao.wang/posts/algs4-eclipse/</link>
      <pubDate>Thu, 21 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://shuxiao.wang/posts/algs4-eclipse/</guid>
      <description>这篇是接上一篇继续讲的，上一篇讲了如何在DrJava和命令行中使用javac-algs4和java-algs4，这一篇将讲述如何在Eclip</description>
    </item>
    
    <item>
      <title>在Windows上安装「算法 第四版」组件</title>
      <link>http://shuxiao.wang/posts/algs4-windows/</link>
      <pubDate>Wed, 20 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://shuxiao.wang/posts/algs4-windows/</guid>
      <description>这篇日志翻译自Hello, World in Java on Windows，翻译的原因是知乎的一个回答，回答完这个问题之后，得到了广泛的。。嗯。。。私信，私信我如何处</description>
    </item>
    
    <item>
      <title>Python</title>
      <link>http://shuxiao.wang/cs/python/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://shuxiao.wang/cs/python/</guid>
      <description>@staticmethod vs. @classmethod 2019-10-02 主要来源：Stack Overflow class A(object): def foo(self, x): print &amp;#34;executing foo(%s, %s)&amp;#34; % (self, x) @classmethod def class_foo(cls, x): print &amp;#34;executing class_foo(%s, %s)&amp;#34; % (cls, x) @staticmethod def static_foo(x): print &amp;#34;executing static_foo(%s)&amp;#34; % x a = A() a.foo(1) # executing foo(&amp;lt;__main__.A object at 0xb7dbef0c&amp;gt;,1) a.class_foo(1) # executing class_foo(&amp;lt;class &amp;#39;__main__.A&amp;#39;&amp;gt;,1) A.class_foo(1) # executing class_foo(&amp;lt;class &amp;#39;__main__.A&amp;#39;&amp;gt;,1) a.static_foo(1) # executing static_foo(1)</description>
    </item>
    
    <item>
      <title>Script</title>
      <link>http://shuxiao.wang/cs/script/</link>
      <pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://shuxiao.wang/cs/script/</guid>
      <description>modify latest commit author git commit --amend --author=&amp;#34;keaising &amp;lt;keaising@gmail.com&amp;gt;&amp;#34; batch-modify-git-committer.sh git filter-branch --env-filter &amp;#39; OLD_EMAIL=&amp;#34;old_email&amp;#34; CORRECT_NAME=&amp;#34;keaising&amp;#34; CORRECT_EMAIL=&amp;#34;keaising@gmail.com&amp;#34; if [ &amp;#34;$GIT_COMMITTER_EMAIL&amp;#34; = &amp;#34;$OLD_EMAIL&amp;#34; ] then export GIT_COMMITTER_NAME=&amp;#34;$CORRECT_NAME&amp;#34; export GIT_COMMITTER_EMAIL=&amp;#34;$CORRECT_EMAIL&amp;#34; fi if [ &amp;#34;$GIT_AUTHOR_EMAIL&amp;#34; = &amp;#34;$OLD_EMAIL&amp;#34; ] then export GIT_AUTHOR_NAME=&amp;#34;$CORRECT_NAME&amp;#34; export GIT_AUTHOR_EMAIL=&amp;#34;$CORRECT_EMAIL&amp;#34; fi &amp;#39; --tag-name-filter cat -- --branches --tags add key of keaising@gmail.com echo &amp;#39;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDEzQ42VEOqjtxbQ4LdArly5dDEz1tBMSaraCGuBfyGQRO5Yk6rivlbx4iIiuM0CsuAWZ/esRZKYl6hwOj3H/PanCrxOTW+mqowUHJIp9+c9FGc7ngneHytB05MaI9S49Iw51xYjRBHWrqvCGxDuggUWYHZNX5j5zy+FJxEUVZ8UQcX0lbKkJWCcMTyjkYHP4VAZygJA65TUW+rLGbA6Slh5dfZXlh7GxdjPG2WJxzJ+vcSPolDoNpoVKslTfLVgW+WFNMxE9AO6zF3K0+9k938PBp7iaDqachfyh6Wb3pz5beuBkAD9nBM0GiJD50d+SAUEpRs5DA79U0+8Jb1vkuH7ylIvXI+rcOwylfnVhUgFuPJS1bPxBrt0bKBqK2EwpFPxeKMylq8/9m+y4GE5/6uMMc0j6SYiN0f0qob1Wb5HgVl11gB9VI75L5NzuRfIiSWP5bJ9yTxjz4TL1lYGASV/WAk4KkmrpkE9HrEqVsJBxCacFZzE3rXAS11lotbEczPIgBNrRf/YN5ZQKDJne9KWBTkhzJ8ej8rlf1hm3EoKGESVByleW0elJDPAN2k+E3Bd10DL395ficJ2TXqlwxtLrp3s1xzj05Coo0tZQpnYfntqs3kPh3Lx9DNRS0JxUP4N8dGF3oSwA8d06VU9e2hG4LzQKZZ+dOief/jLUu9MQ== keaising@gmail.com&amp;#39; &amp;gt;&amp;gt; ~/.</description>
    </item>
    
    <item>
      <title>基于C#的蚁群算法实现</title>
      <link>http://shuxiao.wang/posts/ant-algs-based-on-csharp/</link>
      <pubDate>Sat, 25 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://shuxiao.wang/posts/ant-algs-based-on-csharp/</guid>
      <description>这学期有门课，最优化与最优控制，任课老师任华玲，虽然在课堂上我什么都没有学到，但是最后任老师让每个人自己选一篇最优化方向的论文，把其中的算法</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>http://shuxiao.wang/cs/config/</link>
      <pubDate>Wed, 01 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://shuxiao.wang/cs/config/</guid>
      <description>Shell export export GO111MODULE=on export GOPROXY=&amp;#39;https://goproxy.io&amp;#39; alias alias ll=&amp;#39;ls -al&amp;#39; alias goproxy=&amp;#39;export http_proxy=http://127.0.0.1:7777 https_proxy=http://127.0.0.1:7777&amp;#39; alias disproxy=&amp;#39;unset http_proxy https_proxy&amp;#39; .gitconfig [user] name = keaising email = keaising@gmail.com [core] editor = vi [color] ui = true [alias] co = checkout st = status br = branch ci = commit -m cod = checkout develop cor = checkout release com = checkout master pushm = push origin master pullm = pull -r origin</description>
    </item>
    
  </channel>
</rss>